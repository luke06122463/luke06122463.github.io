<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[BlackSheep]]></title>
  <subtitle><![CDATA[Let every blog records your growth]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com//"/>
  <updated>2015-08-07T16:49:10.000Z</updated>
  <id>http://yoursite.com//</id>
  
  <author>
    <name><![CDATA[Luke06122463]]></name>
    <email><![CDATA[lukaihaoshuai@outlook.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hex to unicode]]></title>
    <link href="http://yoursite.com/2015/08/08/hex-to-unicode/"/>
    <id>http://yoursite.com/2015/08/08/hex-to-unicode/</id>
    <published>2015-08-07T16:27:05.000Z</published>
    <updated>2015-08-07T16:49:10.000Z</updated>
    <content type="html"><![CDATA[<p>Sometimes, we need to read data from old-fashioned devise. Unfortunately, many old-fashioned devise doesn’t support unicode very well. So we need to translate data from any format to unicode.</p>
<a id="more"></a>
<p>Now things become clear that the string returned by ldap API is hex rather than Unicode. We need to format these string to utf-8 before taking any advantage of them.</p>
<p>There are mainly two ways to use ldap result:</p>
<ol>
<li>show the ldap result on web client</li>
<li>store the ldap result to elasticsearch</li>
</ol>
<p>I write a common function to finish the formatting work and here is its definition:<br><img src="/img/unicode_001.jpg" alt="Alt text"></p>
<p>You can use the function to format every ldap result with the usage of <em>Format::String.format_json_to_unicode(source)</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Sometimes, we need to read data from old-fashioned devise. Unfortunately, many old-fashioned devise doesn’t support unicode very well. So we need to translate data from any format to unicode.</p>]]>
    
    </summary>
    
      <category term="RubyOnRails" scheme="http://yoursite.com/categories/RubyOnRails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nginx sub-domain]]></title>
    <link href="http://yoursite.com/2015/08/08/nginx-sub-domain/"/>
    <id>http://yoursite.com/2015/08/08/nginx-sub-domain/</id>
    <published>2015-08-07T16:25:32.000Z</published>
    <updated>2015-08-07T16:48:48.000Z</updated>
    <content type="html"><![CDATA[<p>In order to make the search web and admin search share the same root url (<a href="https://localhost" target="_blank" rel="external">https://localhost</a>) and distinguish each by sub domain(/admin and /search respectively), we need to modify most URL in our project since currently we use absolute path to visit resource.</p>
<p>When we configure nginx to support it, we need to change the way of how we request resource. </p>
<p>For example, currently we access an image with the url of “<a href="https://localhost:3000/assets/image01.jpg”" target="_blank" rel="external">https://localhost:3000/assets/image01.jpg”</a>. But after we turn on nginx’s sub domain functionality, we need to change the way to “<a href="https://localhost/admin/assets/image01.jpg”" target="_blank" rel="external">https://localhost/admin/assets/image01.jpg”</a>  </p>
<p>Actually, we need to change all the url on our web pages. </p>
<h2 id="Here_is_the_resource_category:">Here is the resource category:</h2><ol>
<li>Assets<br>1-a. Style sheets<br>1-b. Javascript files<br>1-c. Image on the html<br>1-d. Image in css<br>1-e. Image inserted into html by js</li>
</ol>
<ol>
<li>Request url<br> 2-a. url on html (hyper link &amp; form)<br> 2-b. url in js (such as ajax url)</li>
</ol>
<p>With some investigation, we found we can take advantage of Rails tag to solve the problem.</p>
<p>When we set  <em>config.relative_url_root = “/admin”</em>  in application.rb, then Rails will prepend  <em>“/admin”</em>  when generating links. So we need to use rails tag in our project as more as possible.</p>
<h3 id="As_to_1-a_(style_sheets)_and_1-b_(javascript_files)">As to 1-a (style sheets) and 1-b (javascript files)</h3><p>I use rails tag ‘javascript_include_tag’ and ‘stylesheet_link_tag’ to request css &amp; js resource.</p>
<p>Before:<br><img src="/img/nginx_001.jpg" alt="Alt text"></p>
<p>After:<br><img src="/img/nginx_002.jpg" alt="Alt text"></p>
<p>Now 1-a (style sheets) and 1-b (javascript files) can be requested in sub-domain mode.</p>
<h3 id="As_to_1-c_(Image_on_the_html)_and_2-a_(url_on_html)">As to 1-c (Image on the html) and 2-a (url on html)</h3><p>There are two ways to introduce them into html.</p>
<p>One way is  creating them with rails tag, such as image_path. Since the url is created by rails tag, then it should work well in sub-domain mode. Just leave it alone.</p>
<p>The other way is the url is specified by developer. The url can be relative-path and it also can be absolute-path.</p>
<ol>
<li>If it is relative-path, then it would work well in sub-domain mode.</li>
<li>If it is absolute-path, then we need to prepend the sub-domain for the url. Fortunately, we can get the sub-domian  from  <em>config.relative_url_root</em> and what we need to do is only adding the <em>relative_url_root</em> before the url.</li>
</ol>
<p>I store <em>relative_url_root</em> into the variable <em>@root_url</em>.<br><img src="/img/nginx_003.jpg" alt="Alt text"></p>
<p>So if you request an image in html with the following way:<br><img src="/img/nginx_004.jpg" alt="Alt text"><br>Now you need to change it to:<br><img src="/img/nginx_005.jpg" alt="Alt text"></p>
<h3 id="As_to_1-d_(Image_in_css)">As to 1-d (Image in css)</h3><p>We can use relative-path to access image</p>
<p>Before:<br><img src="/img/nginx_006.jpg" alt="Alt text"></p>
<p>After:<br><img src="/img/nginx_007.jpg" alt="Alt text"></p>
<h3 id="As_to_1-e(Image_inserted_into_html_by_js)_and_2-b_(url_in_js)">As to 1-e(Image inserted into html by js) and 2-b (url in js)</h3><p>The url must be specified by developer. So,</p>
<ol>
<li>If it is relative-path, then it would work well in sub-domain mode.</li>
<li>If it is absolute-path, then we need to prepend the sub-domain for the url.</li>
</ol>
<p>There is a global js variable <em>global_root_url</em> which represent the <em>relative_url_root</em></p>
<p>So if you specify url in js with the following way:<br><img src="/img/nginx_008.jpg" alt="Alt text"></p>
<p>Then you need to change it to:<br><img src="/img/nginx_009.jpg" alt="Alt text"></p>
<p>Besides, when we use redirect_to to redirect user to some page, then we also need to specify the sub domain for url.<br>Before:<br><img src="/img/nginx_010.jpg" alt="Alt text"><br>After:<br><img src="/img/nginx_011.jpg" alt="Alt text"></p>
<p>Actually, if we don’t set <em>config.relative_url_root</em>, then both <em>@root_url</em>  and <em>global_root_url</em> are empty string.</p>
<p>I have tested it in my environment and it works well both in development and production mode.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In order to make the search web and admin search share the same root url (<a href="https://localhost" target="_blank" rel="external">http]]>
    </summary>
    
      <category term="RubyOnRails" scheme="http://yoursite.com/categories/RubyOnRails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python的类机制]]></title>
    <link href="http://yoursite.com/2015/08/06/Python%E7%9A%84%E7%B1%BB%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2015/08/06/Python的类机制/</id>
    <published>2015-08-06T14:20:09.000Z</published>
    <updated>2015-08-09T15:34:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="初识Python类机制">初识Python类机制</h2><p>首先参照图(pic_01):<br><img src="/img/python/class_object_001.png" alt="Alt text" title="pic_01"></p>
<p>我们可知Python在类机制的实现中引入了两个很纠结的概念：PyTypeObject和基类，从而引出了Class与Instance以及基类和子类的概念。</p>
<p>原以为这两个概念并不存在太大的区别，可在逐步了解Python的对象机制的过程中，我发现两者相辅相成，相互交织却在功能划分上又泾渭分明。</p>
<p>对于一套完整的类实现机制，其流程为:</p>
<ol>
<li>创建Class对象（<code>PyTypeObject</code>）</li>
<li>实例化对象来得到Instance（<code>PyObject</code>）</li>
<li>使用Instance</li>
</ol>
<p>其中，Class对象对应了上图（pic_01）中的中间部分，Instance对象对应最右边，而在最左边还有一个 <code>&lt;type, &#39;type&#39;&gt;</code> 对象，该对象在创建Class对象的过程中起了至关重要的作用。所以图(pic_01)更多地向我们展示了类机制的<code>is-instance-of</code>关系，即instance是怎么一步步创建出来的。我觉得这很重要，它帮助我们理清了Python类机制的层次关系，解答了Python中的先有鸡还是先有蛋的问题。通过这样的叙述关系，我们知道了Instance对象是怎么来的，同样地，我们也弄清楚了负责创建Instance的Class对象又是怎么被创建。这对于我们了解Python的类机制怎么从无到有以及将Class与Instance的关系抽象出来并与其他语言的类概念联系起来，都非常有帮助。</p>
<p>但上面的描述不够具体，忽略了很多的实现细节。要想从根本上理解Python的对象机制，我们不仅要从设计上理解各个概念之间的关系，并且我们还需要从实现上窥视所谓的类和对象的本质。换种说法就是怎样用其他语言来实现Python的类机制。</p>
<h2 id="类机制的实现">类机制的实现</h2><p>简单的说，Instance对象就是一堆数据以及围绕这些数据进行操作的一组方法的集合。在类机制里面，我们称数据之为成员变量，称围绕这些数据进行操作的方法为成员方法。</p>
<h3 id="C++中的实现">C++中的实现</h3><p>在C++中，Instance对象无非就是一段固定的内存和一堆指令码的集合。内存用于存放数据，指令码用于操作内存中的数据以及一些逻辑操作。</p>
<p>在C++的世界里，Class仅仅是Instance的模板，它仅仅定义了Instance应该是什么样子的，有哪些成员变量，有哪些成员方法。这样纯粹的说明是不需要使用内存的（为了简化问题，这里不考虑static成员变量，话说static存放的内存空间也跟成员变量不一样=.=!!），所以在C++中，Class仅仅是一堆指令码的集合（指令码会从硬盘读取到内存，但因为概念不一样，所以区别于一般的存放程序数据的内存）。而Instance就不一样了，在Class的new函数（也是一堆指令码&gt;.&lt;）的指挥下开始申请内存然后初始化成员变量，并且通过函数指针使用Class中定义的成员方法来操作内存中的成员变量。</p>
<p>总结一下就是，在C++的实现中：</p>
<ol>
<li>Class用于描述Instance的结构和方法，其本质是一堆指令码，包括用于操作Instance的结构的new、destroy等方法，以及提供给Instance使用的方法。</li>
<li>Instance是一段固定的内存和一堆指令码的集合，是面向对象的设计思想中的核心。其内存的申请和分配均由Class的new函数来负责，而成员方法均由Class来定义。</li>
</ol>
<blockquote>
<p>脑洞大开一下，我再补充个观点，未得到验证所以不见得对，请大家绕道。</p>
<p>由于C++是对C的补充和扩展，所以它的实现也是依托于C。但是C本身是面向过程的语言，只有function和variable。套用我先前所提到的逻辑，<em>Instance是一段固定的内存和一堆指令码的集合</em>，慢着，怎么这么耳熟，这不就是variable（一段固定的内存）+ function（一堆指令码）的组合嘛！但是variable不能提前定义啊，否则它的内存地址就确定下来了，并且不同的Instance应该拥有属于自己的variable集合，这样的动态分配是Instance本身所不具备的功能，需要在更高层完成；同样地，我们不能重复定义function，所有的Instance应该share相同的function集合，再加上继承、共私有机制的引进，Instance本身无法实现这样的需求，同样需要在更高层完成。所以这时候我们需要Class来完成这些工作。Class通过new函数来为新创建的Instance申请空间，并在申请到的空间中申明variable；紧接着variable，Class会在之后的内存中存放Instance需要的函数所对应的函数指针。每个函数会根据所分配的首地址以及成员变量的地址偏移来得到variable并对其操作。大概这样就能实现了吧，么么哒~</p>
</blockquote>
<h3 id="Python中的实现">Python中的实现</h3><p>至于基类的继承，更多地是属性的重用，所以图(pic_01)并未很好地展现继承的层次关系。</p>
<p>以上是我对<code>is-instance-of</code>以及<code>is-kind-of</code>的初步理解。接下来，我将通过对Class对象以及instance对象创建过程的剖析来探究PyTypeObject。不可避免地，我们会涉及到类的继承，因为它们本来就都是整个Class对象的一部分。</p>
<p>图(pic_01)很好地展示了Python的类机制的层次关系，即<code>metaclass</code>负责创建其他的class对象，而这些被创建的class对象负责创建instance对象，所以也就出现了两层<code>is-instance-of</code>关系。也正是因为存在这两层的<br><code>is-instance-of</code>，class对象和instance对象才能从无到有。我在阅读《Python源码剖析》的过程中，不曾看到哪个PyTypeObject的ob_type所指向的非<code>metaclass</code>，这样的机制极大地简化了Python的类机制，易于理解也易于实现。</p>
<p><strong>为了更贴近Python的语言风格，在接下来的描述中，如果涉及到概念，我将延续先前使用的Class&amp;Instance这样的术语，但在涉及到Python的具体实现中我将会</strong></p>
<ol>
<li>用<code>PyTypeObject</code>来表示Class对象</li>
<li>用<code>PyObject实例</code>来表示Instance对象</li>
<li>用<code>PyObject</code>来泛指Python的所有对象（everything in python is a object）</li>
<li>用<code>PyBaseObject_Type</code>来表示所有Python最基本的Class对象，所有的<code>PyObject</code>均继承自它。原型为<code>&lt;type, &#39;object&#39;&gt;</code></li>
</ol>
<p>为了更好地展示如何通过<code>PyTypeObject</code>来创建<code>PyObject实例</code>，我在这里展示另外一张图(pic_02):<br><img src="/img/python/class_object_002.png" alt="Alt text" title="pic_02"></p>
<p>标上序号的虚线箭头代表了创建整数对象的函数调用流程，可以概括为：首先<code>PyTypeObject</code>(在这里即为<code>PyInt_type</code>)的tp_new会被调用，该函数可以视为new操作符（为instance对象申请内存空间以及初始化工作），若tp_new为NULL，<code>PyTypeObject</code>对象会去寻找基类(<code>PyBaseObject_Type</code>)的tp_new函数。因为所有的<code>PyObject</code>都继承自<code>PyBaseObject_Type</code>，而<code>PyBaseObject_Type</code>的tp_new的实现不为NULL，所以任何<code>PyObject</code>总能找到tp_new函数来完成用<code>PyObject实例</code>的创建。在具体的实现中，tp_new函数会访问<code>PyTypeObject</code>的tp_basicsize来确定要申请的空间大小；当空间申请结束之后，tp_new会调用tp_init函数来完成初始化工作。</p>
<p>Python的对象创建机制比较复杂，但工作原理却相当明朗，即Class对象调用自身的tp_new，赋以自身的一些必要属性作为参数，来为Instance对象分配内存和初始化工作。所以才有我先前的结论：Python是由Class对象（<code>PyTypeObject</code>）来负责对象的实例化，其中，我们看到某一Class对象的tp_new的具体实现可以不是由自身给出，而是顺藤摸瓜，通过一系列的函数指针的传递和函数调用来确定最终的函数实现。</p>
<p>在这里我们可以看到继承的运用。继承更多地</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="初识Python类机制">初识Python类机制</h2><p>首先参照图(pic_01):<br><img src="/img/python/class_object_001.png" alt="Alt text" title="pic_01"></p>
<p>]]>
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Pipeline in RubyOnRails]]></title>
    <link href="http://yoursite.com/2015/08/06/pipeline-in-rubyOnRails/"/>
    <id>http://yoursite.com/2015/08/06/pipeline-in-rubyOnRails/</id>
    <published>2015-08-06T14:14:05.000Z</published>
    <updated>2015-08-07T16:24:53.000Z</updated>
    <content type="html"><![CDATA[<p>Here is a simple introduction about how to use pipeline in Rails Framework step by step.<br><a id="more"></a></p>
<p>Last week I spent several days on studying on how Rails pipeline works. I鈥檇 like to share you with what I finally found. Maybe we can take its advantage in future release.</p>
<p>There are several steps of applying pipeline into our project:</p>
<h2 id="Prepare_folders">Prepare folders</h2><p>Create folders under “app/assets” for each resource(here each controller is a resource) to store all related static files(js, css, image). For dashboards, we need to create two folders, under “app/assets/javascript” and “app/assets/stylesheet” respectively.<br><img src="/img/pipeline_001.jpg" alt="Alt text"></p>
<p>After the creation of the folders is done, we need to move the related js resource and css resource to that folders.</p>
<h2 id="Create_manifest">Create manifest</h2><p>Create a manifest for each resource to describe its static files. For dashboards, we need to create two manifest files, dashboards.js and dashboards.css<br><img src="/img/pipeline_002.jpg" alt="Alt text"></p>
<h2 id="Config_manifest">Config manifest</h2><p>In the manifest, we need to point out which static files should be compressed into a single file.</p>
<ul>
<li><p>dashboard.js<br><img src="/img/pipeline_003.jpg" alt="Alt text"></p>
</li>
<li><p>dashboard.css<br><img src="/img/pipeline_004.jpg" alt="Alt text"></p>
</li>
</ul>
<h2 id="Set_the_precompile_list">Set the precompile list</h2><p>All the static files that need to be compressed by pipeline should be specified explicitly in config/application.rb<br><img src="/img/pipeline_005.jpg" alt="Alt text"></p>
<h2 id="Compress_static_files">Compress static files</h2><p>Compress all the resource files with the command of <em>RAILS_ENV=production bin/rake assets:precompile</em></p>
<p>After compression, the name of resource file will be changed:<br><img src="/img/pipeline_006.jpg" alt="Alt text"></p>
<h2 id="Refer_compressed_resource">Refer compressed resource</h2><p>Add reference to the compressed resource file in application.html.erb. Here is the sample code:<br><img src="/img/pipeline_007.jpg" alt="Alt text"></p>
<p>Each page will only load its corresponding resource file. For example, dashboards page will only load dashboards.js and dashboards.css.<br>    聽<br>Since the all the js files have been compressed into dashboard.js and all the css file into dashboards.css, it would be sufficient for dashboards page to load only dashboards.js and dashboards.css</p>
<h2 id="Deal_with_images">Deal with images</h2><p>After applying pipeline, all images’ name will be changed. So we need to use rails tag to display image.</p>
<p>Firstly, we can use css to present image instead of img tag.</p>
<p>Then, We need to use .css.erb so that we can take the advantage of Rails Helper to convert the image鈥檚 name to its real name.<br><img src="/img/pipeline_008.jpg" alt="Alt text"></p>
<h2 id="Production_Model">Production Model</h2><p>Switch the web server to production environment with the command of rails server 鈥揺 production</p>
<p><em>Now we can access the compressed resource file in production model.</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Here is a simple introduction about how to use pipeline in Rails Framework step by step.<br>]]>
    
    </summary>
    
      <category term="RubyOnRails" scheme="http://yoursite.com/categories/RubyOnRails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/08/01/hello-world/"/>
    <id>http://yoursite.com/2015/08/01/hello-world/</id>
    <published>2015-08-01T14:14:05.000Z</published>
    <updated>2015-08-06T14:25:35.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to Black Sheep’s blog.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to Black Sheep’s blog.</p>
]]>
    </summary>
    
      <category term="BlackSheep" scheme="http://yoursite.com/categories/BlackSheep/"/>
    
  </entry>
  
</feed>